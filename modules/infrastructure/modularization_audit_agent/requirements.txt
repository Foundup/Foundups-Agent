# ModularizationAuditAgent Dependencies - WSP 12 Compliance

# Core Python libraries (built-in, no version constraints)
# ast - Abstract Syntax Tree parsing for Python code analysis
# pathlib - Modern path handling for file system operations  
# typing - Type hints and annotations for better code clarity
# dataclasses - Structured data classes for violation tracking
# json - JSON serialization for audit reports and memory operations
# os - Operating system interface for file operations
# datetime - Timestamp generation for audit reports

# External Dependencies
# Testing framework
pytest>=7.0.0
pytest-cov>=4.0.0

# Development dependencies  
# No external runtime dependencies - agent uses only Python built-ins
# This ensures maximum compatibility and minimal dependency conflicts

# WSP Framework Integration
# The agent integrates with existing WSP framework modules:
# - modules.infrastructure.models (shared data structures)
# - modules.wre_core (recursive engine integration)  
# - tools.modular_audit (validation utilities)

# Notes:
# - AST parsing uses built-in ast module (Python 3.8+)
# - File operations use built-in pathlib and os modules
# - Pattern matching uses built-in string and regex operations
# - Memory operations use built-in json serialization
# - No ML dependencies in initial implementation (Phase 222 enhancement)
# - No external API dependencies (fully autonomous operation)

# Performance Notes:
# - Large codebase scanning may require memory considerations
# - For >10,000 files, consider incremental processing
# - AST parsing scales linearly with codebase size

# WSP Compliance:
# - WSP 12: Dependency Management - All dependencies declared
# - WSP 54: Agent Duties - Minimal external dependencies for reliability
# - WSP 62: Size Compliance - Lightweight dependency footprint 