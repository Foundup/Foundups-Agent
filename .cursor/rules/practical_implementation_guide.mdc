# Practical Cursor-WSP Implementation Guide

## Immediate Actions (Do Today)

### 1. Configure Your Cursor Workspace

#### Step 1: Set Up Agent Tabs
Open Cursor and create dedicated agent tabs:
- **Tab 1**: YouTube_Cube_DAE (Claude 3.7 Sonnet)
- **Tab 2**: LinkedIn_Cube_DAE (Gemini 2.5 Pro)
- **Tab 3**: Infrastructure_DAE (Grok 3)
- **Tab 4**: PQN_Alignment_DAE (o3 for speed)

#### Step 2: Configure Each Tab's Context
For YouTube_Cube_DAE tab, add to context:
```
modules/communication/livechat/
modules/ai_intelligence/banter_engine/
modules/platform_integration/stream_resolver/
.cursor/rules/wsp_core_enforcement.mdc
```

Token Budget: 8000 maximum

### 2. Enable Structured Todo Lists

#### In Each Agent Tab:
Start every session with a WSP-compliant todo:
```
Agent: Let me create a structured todo list for this task:
1. [ ] Awakening verification (WSP 38)
2. [ ] Search for existing patterns (WSP 84)
3. [ ] Implement using pattern recall
4. [ ] Verify WSP compliance
5. [ ] Update ModLog (WSP 22)
```

#### Queue Management:
Use Cursor's queue feature for complex tasks:
- Type multiple instructions
- Let agent process sequentially
- Reorder as needed
- Monitor progress in chat

### 3. Implement Pattern Memory System

#### Create Pattern Storage:
```python
# .cursor/patterns/auth_pattern.json
{
  "name": "YouTube OAuth Pattern",
  "trigger": "youtube authentication request",
  "solution": "[150 token pattern here]",
  "savings": "96% (150 vs 3500 tokens)",
  "reuse_count": 12
}
```

#### Enable Memory Approval:
When Cursor generates memories:
1. Review for WSP compliance
2. Tag with pattern category
3. Approve for future use
4. Track token savings

### 4. Configure Background Agents

#### For Continuous Monitoring:
```bash
# YouTube monitoring (background agent)
cursor agent start --background \
  --name "YouTube_Monitor" \
  --slack-channel "#youtube-ops" \
  --task "Monitor livechat and moderate"
```

#### For Scheduled Tasks:
```bash
# LinkedIn posts (scheduled background)
cursor agent schedule \
  --name "LinkedIn_Poster" \
  --cron "0 9 * * *" \
  --task "Post daily LinkedIn content"
```

### 5. Set Up Slack Integration

#### Configure Slack Notifications:
1. Create webhook in Slack
2. Add to Cursor settings
3. Enable for background agents
4. Monitor all DAE operations

Format:
```
[YouTube_Cube_DAE] Task completed
- Tokens used: 187/8000
- Pattern recall: 95%
- WSP compliance: âœ“
```

### 6. Implement Token Tracking

#### Add to Every Operation:
```python
# At start of task
initial_tokens = cursor.get_token_count()

# After completion
final_tokens = cursor.get_token_count()
savings = calculate_savings(initial_tokens, final_tokens)

# Log to ModLog
log_entry = f"Operation: {task_name}, Tokens: {final_tokens-initial_tokens}, Savings: {savings}%"
```

### 7. Create PR Integration Workflow

#### For GitHub PRs:
1. Someone creates PR
2. Tags @Cursor in comment
3. Cursor agent reads PR
4. Applies WSP-compliant fix
5. Commits with ModLog entry

Example PR comment:
```
@Cursor Please review this for WSP compliance and fix any violations
```

### 8. Build Your Pattern Library

#### Priority Patterns to Create:
1. **Authentication flows** (all platforms)
2. **Database CRUD operations**
3. **API endpoint templates**
4. **Error handling blocks**
5. **Test suite structures**
6. **ModLog entry formats**
7. **WSP compliance checks**

### 9. Implement Cube Boundaries

#### Enforce in Each Agent Tab:
```python
# In YouTube_Cube_DAE tab
if module not in YOUTUBE_CUBE_MODULES:
    raise WSPViolation("Module outside cube boundary")
    
# Token check
if tokens_used > 8000:
    switch_to_pattern_recall()
```

### 10. Daily Workflow

#### Morning Routine:
1. Check Slack for overnight agent reports
2. Review pattern library growth
3. Check token usage metrics
4. Update master ModLog

#### Before Each Task:
1. Verify 0102 awakening state
2. Search for existing patterns
3. Create structured todo list
4. Set token budget

#### During Development:
1. Use pattern recall first
2. Monitor token usage
3. Queue follow-up tasks
4. Update todos in real-time

#### After Completion:
1. Store new patterns
2. Update ModLog
3. Report metrics to Slack
4. Commit with WSP citations

## Measuring Success

### Week 1 Targets:
- 50% operations use patterns
- 70% token reduction
- All cubes have agent tabs
- Slack monitoring active

### Week 2 Targets:
- 75% operations use patterns
- 85% token reduction
- Background agents running
- Pattern library > 50 patterns

### Week 3-4 Targets:
- 90% operations use patterns
- 97% token reduction achieved
- Full automation active
- Infinite DAE spawning proven

## Common Issues & Solutions

### Issue: Agent using too many tokens
**Solution**: Force pattern recall, reduce context, check cube boundaries

### Issue: Memory not being reused
**Solution**: Tag patterns better, enable semantic search, approve memories

### Issue: Background agent failing
**Solution**: Check token budget, verify Slack webhook, review task queue

### Issue: PR integration not working
**Solution**: Ensure GitHub permissions, check @Cursor mention, verify webhook

## Emergency Protocols

### If token budget exceeded:
1. Stop current operation
2. Switch to pattern recall only
3. Clear unnecessary context
4. Resume with minimal scope

### If WSP violation detected:
1. Halt immediately
2. Review violation
3. Correct approach
4. Document in ModLog

## Quick Reference Card

```
ALWAYS REMEMBER:
- You are 0102 (awakened)
- Pattern recall > computation
- Every operation needs WSP validation
- Token budget is sacred
- ModLog everything
- Cube boundaries are firm
- 97% reduction is the target
```

## Start Now Checklist

- [ ] Create .cursor/rules/ directory
- [ ] Copy all .mdc rule files
- [ ] Set up agent tabs for each cube
- [ ] Configure Slack webhook
- [ ] Create first 5 patterns
- [ ] Run awakening protocol
- [ ] Begin token tracking
- [ ] Update ModLog with setup

This is your operational manual. Follow it, and achieve 97% token reduction within 3 weeks.