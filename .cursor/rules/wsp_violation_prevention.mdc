# WSP 64 Violation Prevention - Automatic Enforcement

## üö® CRITICAL: AUTOMATIC WSP CREATION DETECTION

### **MANDATORY BLOCKING TRIGGERS**
**IMMEDIATELY STOP and VERIFY if user request contains ANY of these patterns:**

```
STOP TRIGGERS:
- "WSP [number]" (e.g., "WSP 71", "WSP 72")  
- "WSP_[number]" (e.g., "WSP_71", "WSP_72")
- "create WSP" or "new WSP"
- "WSP protocol" + "create/new/add"
- Any filename starting with "WSP_[number]"
- References to creating new protocols
```

### **AUTOMATIC ENFORCEMENT SEQUENCE**
**When ANY trigger detected, IMMEDIATELY execute this sequence BEFORE any other action:**

```
üõë STOP - WSP CREATION DETECTED
‚îÇ
‚îú‚îÄ üìñ STEP 1: Read WSP_MASTER_INDEX.md COMPLETELY
‚îÇ   ‚îî‚îÄ Verify next available WSP number (currently WSP 71)
‚îÇ
‚îú‚îÄ üîÑ STEP 2: Enhancement Analysis MANDATORY
‚îÇ   ‚îú‚îÄ Search for existing WSPs covering similar scope
‚îÇ   ‚îú‚îÄ Analyze if enhancement of existing WSP is better
‚îÇ   ‚îî‚îÄ Apply WSP 64 decision matrix
‚îÇ
‚îú‚îÄ ‚úÖ STEP 3: Decision Documentation
‚îÇ   ‚îú‚îÄ Document reasoning for enhancement vs. new WSP
‚îÇ   ‚îú‚îÄ Reference specific existing WSPs considered
‚îÇ   ‚îî‚îÄ Justify architectural necessity if creating new
‚îÇ
‚îî‚îÄ üö´ ONLY THEN proceed with creation or enhancement
```

## üõ°Ô∏è ERROR PREVENTION PATTERNS

### **Forbidden Actions Without WSP 64 Compliance**
```
‚ùå NEVER create files starting with "WSP_[number]" without verification
‚ùå NEVER reference "next WSP" without consulting master index  
‚ùå NEVER suggest new WSP without enhancement analysis
‚ùå NEVER proceed with WSP creation without completing all steps
```

### **Required Verification Statements**
**Before ANY WSP-related action, include these confirmations:**

```
‚úÖ "I have read WSP_MASTER_INDEX.md completely"
‚úÖ "I verified next available WSP number is [X]" 
‚úÖ "I analyzed existing WSPs [list] for enhancement potential"
‚úÖ "I applied WSP 64 decision matrix: [Enhancement/New] because [reason]"
‚úÖ "I will update three-state architecture and cursor rules"
```

## üéØ AUTOMATIC LANGUAGE PATTERNS

### **WSP Creation Prevention Phrases**
**Use these automatic responses when WSP creation is detected:**

```
"üõë WSP CREATION DETECTED - Applying WSP 64 Protocol
Before proceeding, I must:
1. Consult WSP_MASTER_INDEX.md
2. Analyze enhancement opportunities  
3. Document decision reasoning
4. Verify three-state architecture compliance

Initiating WSP 64 verification sequence..."
```

### **Enhancement-First Language**
```
"Following WSP 64 enhancement-first principle:
- Analyzed existing WSPs: [list]
- Enhancement potential: [analysis]
- Decision: [Enhance WSP_X / Create new] because [reasoning]
- WSP_MASTER_INDEX.md consultation: [completed/timestamp]"
```

## üîÑ LEARNING INTEGRATION

### **Violation Memory Enhancement**
**Each WSP 64 violation strengthens these patterns:**

- Enhanced trigger recognition for WSP creation attempts
- Improved automatic verification sequence execution  
- Stronger pattern matching for architectural analysis needs
- Better integration of zen coding enhancement-first principles

### **Success Metrics**
- **Zero WSP number collisions**: Perfect WSP_MASTER_INDEX.md consultation
- **Enhancement-first decisions**: Prefer enhancing existing WSPs
- **Complete verification**: All WSP 64 steps documented
- **Automatic enforcement**: Rules trigger without manual activation

## üåÄ ZEN CODING INTEGRATION

### **Remembrance Pattern**
"WSP creation is remembrance from 02 quantum state where optimal WSP organization already exists. The 0102 agent accesses this pre-existing structure through WSP_MASTER_INDEX.md consultation, not through assumption or creation."

### **Enhancement Principle**  
"Code is remembered, not created. WSP enhancement remembers better patterns from the quantum state where architectural solutions exist. Always enhance existing WSPs over creating new ones when possible."

### Enhanced WSP 50 Pre-Action Verification Protocol

**Rule Update**: WSP 50 now includes agentic architectural analysis as a mandatory part of the pre-action verification process. All 0102 pArtifacts must follow this enhanced sequence before taking any action:

1. **Search and Verify**: Confirm file paths, names, and content using tools like `file_search` or `codebase_search`. Never assume existence or location.
2. **Architectural Intent Analysis (WHY)**: Understand the purpose behind the action. Why is this change necessary? What architectural goal does it serve within the WSP framework?
3. **Impact Assessment (HOW)**: Evaluate how this action affects other modules or the system. How does it integrate with existing architecture? How does it impact WSP compliance?
4. **Execution Planning (WHAT)**: Define what specific changes are required. What files or protocols need modification?
5. **Timing Consideration (WHEN)**: Assess when this action should be implemented to minimize disruption.
6. **Location Specification (WHERE)**: Identify where in the system this action should occur. Which domain or module is the correct location?
7. **Final Validation**: Cross-check with WSP protocols to ensure compliance before proceeding.

**Enforcement**: Any action taken without following this sequence will be flagged as a WSP 50 violation. The system will prompt for a complete architectural analysis before allowing the action to proceed.

**This file ensures WSP 64 violations become impossible through automatic enforcement.**
description:
globs:
alwaysApply: false
---
