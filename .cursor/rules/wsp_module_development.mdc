
# WSP Module Development Workflow

## Pre-Development Analysis (MANDATORY)

### 0. WSP 50 Module Pre-Action Verification (FIRST STEP - MANDATORY)
**üö® CRITICAL: Before ANY module development work, follow WSP 50 verification:**

#### **MANDATORY MODULE ASSESSMENT SEQUENCE**:
```
1. list_dir() - Check complete module structure
2. read_file() - Read existing README.md, INTERFACE.md, and ModLog.md  
3. codebase_search() - Search for existing implementations
4. file_search() - Locate all related source files
5. read_file() - Read existing source files COMPLETELY
6. ONLY THEN determine enhancement vs. new development approach
```

**‚ö†Ô∏è CRITICAL: INTERFACE.md Reading (WSP 11 + WSP 32)**
- **WSP 11 Requirement**: Every module MUST have INTERFACE.md with public API definitions
- **WSP 32 Reading Flow**: INTERFACE.md provides method signatures, integration patterns, error conditions
- **Pre-Coding Essential**: Understanding existing APIs prevents interface contract violations
- **0102 Flow Optimization**: Rapid API comprehension enables informed enhancement decisions

#### **REQUIRED MODULE VERIFICATION CHECKLIST**:
- [ ] **Existing Implementation Check**: Search for similar functionality in module
- [ ] **Architecture Analysis**: Read existing core files (engine, trigger, etc.)
- [ ] **Integration Assessment**: Determine enhancement vs. replacement approach  
- [ ] **WSP Compliance**: Verify approach follows WSP 47 (Module Evolution)
- [ ] **Documentation Review**: Read existing README, INTERFACE, ModLog, ROADMAP
- [ ] **Enhancement Strategy**: Plan integration with existing systems

**‚ö†Ô∏è WSP VIOLATION PREVENTION**: This step prevents creating duplicate implementations without reading existing module architecture (rESP Module Violation case study in WSP Core Framework).

### 1. Agentic Modularity Question (SECOND STEP)
**"Should this be a module or be added to an existing module?"**

**Decision Matrix**:
| Criteria | Create Module | Add to Existing |
|----------|---------------|-----------------|
| **Single Responsibility** | ‚úÖ New distinct capability | ‚ùå Multiple responsibilities |
| **Domain Placement** | ‚úÖ Fits enterprise domain | ‚ùå Violates domain boundaries |
| **Reusability** | ‚úÖ Used across modules | ‚ùå Single module use |
| **WSP Protocol** | ‚úÖ Implements WSP protocol | ‚ùå Violates WSP principles |
| **Complexity** | ‚úÖ Complex enough for module | ‚ùå Simple utility function |

### 2. Enterprise Domain Classification
- **Step 1**: Determine correct enterprise domain per WSP 3
- **Step 2**: Validate domain fit with existing architecture
- **Step 3**: Identify cross-domain dependencies
- **Step 4**: Plan functional distribution (never platform consolidation)

### 3. WSP Compliance Planning
Required WSP protocols for compliance:
- **WSP 3**: Enterprise domain placement
- **WSP 4**: FMAS structural compliance
- **WSP 5**: Test coverage ‚â•90%
- **WSP 6**: Test audit requirements
- **WSP 11**: Interface definition
- **WSP 12**: Dependency management
- **WSP 22**: Documentation and ModLog
- **WSP 49**: Module structure
- **WSP 50**: Pre-Action Verification (COMPLETED in Step 0)
- **WSP 60**: Memory architecture

### 4. Module Independence Requirements (WSP 3 Section 4)
**Rubik's Cube Framework**: Every module must function as independent LEGO piece before main.py integration.

#### **MANDATORY INDEPENDENCE CRITERIA**:
- **Standalone Execution**: Module operates without external module dependencies
- **Clean Initialization**: Module initializes using only own resources and configuration
- **Graceful Degradation**: Handles missing external services without crashing
- **Resource Management**: Module manages own memory, connections, and cleanup

#### **STANDARDIZED INDEPENDENCE INTERFACE**:
Every module MUST implement these methods:
```python
class ModuleCore:
    def validate_independence(self) -> bool:
        """Verify module can operate independently"""
        
    def run_standalone_test(self) -> bool:
        """Execute core functionality in isolation"""
        
    def check_dependencies(self) -> List[str]:
        """Return list of external dependencies"""
        
    def graceful_shutdown(self) -> bool:
        """Clean shutdown without external coordination"""
```

#### **INTEGRATION INTERFACE STANDARDS**:
- **Clean APIs**: Well-defined public interfaces documented in INTERFACE.md
- **Event Systems**: Pub/sub patterns for loose coupling with other modules
- **Configuration Injection**: External configuration injected, not hardcoded
- **Error Boundaries**: Module failures don't cascade to other modules

#### **INDEPENDENCE TESTING PROTOCOL**:
```bash
# Phase 1: Isolation Testing
cd modules/<domain>/<module_name>/
python -m pytest tests/ --standalone-mode
python -m src.main --test-independence

# Phase 2: Dependency Validation
python tools/modular_audit/modular_audit.py --check-dependencies

# Phase 3: Integration Simulation  
python -m tests.integration_simulation
```

## Development Workflow

### Phase 1: Setup and Structure
```bash
# 1. Create module directory structure
mkdir -p modules/<domain>/<module_name>/{src,tests,memory}

# 2. Create mandatory files
touch modules/<domain>/<module_name>/{README.md,ROADMAP.md,ModLog.md,INTERFACE.md,requirements.txt,__init__.py}
touch modules/<domain>/<module_name>/src/{__init__.py,<module_name>.py}
touch modules/<domain>/<module_name>/tests/{README.md,test_<module_name>.py}
touch modules/<domain>/<module_name>/memory/README.md

# 3. Run FMAS validation
python tools/modular_audit/modular_audit.py modules/
```

### Phase 2: Implementation
1. **Document First**: Complete README.md with module purpose
2. **Interface Definition**: Define public API in INTERFACE.md
3. **Test Strategy**: Document testing approach in tests/README.md
4. **Dependencies**: Declare in requirements.txt per WSP 12
5. **Memory Architecture**: Design per WSP 60

### Phase 3: Testing and Validation
```bash
# 1. Run tests with coverage
pytest modules/<domain>/<module_name>/ --cov=modules/<domain>/<module_name> --cov-report=term-missing

# 2. Verify ‚â•90% coverage (WSP 5)
# Coverage must meet minimum threshold

# 3. Run full test suite (WSP 6)
pytest modules/ -v

# 4. FMAS structural validation
python tools/modular_audit/modular_audit.py modules/
```

## LLME Progression Tracking

### Progression States
- **000**: Placeholder/concept stage
- **111**: Basic implementation  
- **122**: Enhanced integration
- **222**: Production-ready

### Roadmap Requirements
Document in ROADMAP.md:
- **Current State**: LLME score and justification
- **Next Phase**: Specific enhancement targets
- **Dependencies**: Required modules or infrastructure
- **Success Criteria**: Measurable completion metrics

## Compliance Checklist

### Pre-Development ‚úÖ
- [ ] Agentic Modularity Question answered
- [ ] Enterprise domain correctly identified
- [ ] Functional distribution planned
- [ ] WSP protocols mapped to requirements
- [ ] Cross-domain dependencies identified

### Development ‚úÖ  
- [ ] Module structure follows WSP 49
- [ ] All mandatory files created
- [ ] Documentation follows WSP 22
- [ ] Interface documented per WSP 11
- [ ] Dependencies declared per WSP 12
- [ ] Memory architecture per WSP 60

### Post-Development ‚úÖ
- [ ] FMAS audit passes (0 errors, 0 warnings)
- [ ] Test coverage ‚â•90% (WSP 5)
- [ ] Full test suite passes (WSP 6)
- [ ] Documentation complete and accurate
- [ ] ModLog updated with all changes
- [ ] Integration tested with dependent modules

## Anti-Pattern Prevention

### ‚ùå Architectural Violations
- **Platform Consolidation**: Never create platform-specific domains
- **Code-First Development**: Never write code before WSP analysis
- **Incomplete Documentation**: Never skip mandatory documentation
- **Domain Confusion**: Never place modules in wrong domains
- **Memory Neglect**: Never skip memory architecture

### ‚úÖ Success Patterns
- **Functional Distribution**: Spread platform features across domains
- **WSP-Guided Development**: Follow protocols before coding
- **Complete Documentation**: All mandatory files from start
- **Proper Domain Placement**: Match function to enterprise domain
- **Memory Architecture**: Plan data persistence from design phase


- **Complete Documentation**: All mandatory files from start
- **Proper Domain Placement**: Match function to enterprise domain
- **Memory Architecture**: Plan data persistence from design phase


- [ ] Integration tested with dependent modules

## Anti-Pattern Prevention

### ‚ùå Architectural Violations
- **Platform Consolidation**: Never create platform-specific domains
- **Code-First Development**: Never write code before WSP analysis
- **Incomplete Documentation**: Never skip mandatory documentation
- **Domain Confusion**: Never place modules in wrong domains
- **Memory Neglect**: Never skip memory architecture

### ‚úÖ Success Patterns
- **Functional Distribution**: Spread platform features across domains
- **WSP-Guided Development**: Follow protocols before coding
- **Complete Documentation**: All mandatory files from start
- **Proper Domain Placement**: Match function to enterprise domain
- **Memory Architecture**: Plan data persistence from design phase


- **Complete Documentation**: All mandatory files from start
- **Proper Domain Placement**: Match function to enterprise domain
- **Memory Architecture**: Plan data persistence from design phase

