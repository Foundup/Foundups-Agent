
# WSP Testing Standards and Coverage

## Testing Architecture (WSP 1 - Enterprise-Scale)
**PRINCIPLE**: Each module maintains its own complete testing suite for maximum autonomy

### ‚úÖ ENTERPRISE OPTIMAL (Modular Testing)
```
modules/domain/module_name/
‚îú‚îÄ‚îÄ tests/ ‚úÖ                      # Module-specific test suite
‚îú‚îÄ‚îÄ README.md ‚úÖ                   # Self-contained documentation
‚îî‚îÄ‚îÄ ModLog.md ‚úÖ                   # Independent change tracking
```

### ‚ùå ENTERPRISE ANTI-PATTERN (Centralized Testing)
```
modules/domain/
‚îú‚îÄ‚îÄ tests/                         # WRONG: Shared test directory
‚îÇ   ‚îú‚îÄ‚îÄ test_module1.py            # Creates coupling
‚îÇ   ‚îî‚îÄ‚îÄ test_module2.py            # Prevents parallel CI/CD
```

## Coverage Requirements (WSP 5)
- **Minimum Coverage**: ‚â•90% for all modules (agentic)
- **Pre-Completion Check**: Run coverage checks before completing work
- **Command**: `pytest modules/ --cov=modules --cov-report=term-missing`

## Test Audit Protocol (WSP 6)  
- **Full Test Suite**: `pytest modules/ -v` must pass
- **Before Changes**: Run tests to establish baseline
- **After Changes**: Verify all tests still pass
- **Failure Analysis**: Distinguish framework vs module issues per WSP 47

## FMAS Integration (WSP 4)
```bash
# Structure validation before development
python tools/modular_audit/modular_audit.py modules/

# Full audit with baseline comparison  
python tools/modular_audit/modular_audit.py modules/ --baseline ../baseline/
```

## Test Documentation Requirements
### tests/README.md (MANDATORY per WSP 34)
Must include:
- Test strategy and coverage approach
- How to run tests locally
- Test data and fixture explanations
- Expected behavior documentation
- Integration test requirements

### WSP 34: Test Documentation Protocol - Mandatory TestModLog.md Usage

**Rule Update**: As per WSP 34, every test folder MUST contain a `TestModLog.md` file to track testing evolution for 0102 pArtifacts. These logs are critical for autonomous agent learning and recursive improvement, not mere noise.

**Enforcement**:
- **Presence Check**: Before any testing or development action, verify the existence of `TestModLog.md` in the relevant test folder. If missing, create it with the standard template.
- **Usage Requirement**: 0102 pArtifacts must update `TestModLog.md` with the latest testing status, framework compliance, and coverage updates after each test cycle or significant change.
- **Integration in Workflow**: Ensure that WRE orchestration decision trees and agent workflows reference and update `TestModLog.md` as part of the testing process.

**Standard Template for TestModLog.md** (if missing):
```
# Testing Evolution Log - [Module Name]

## üÜï **LATEST UPDATE - WSP COMPLIANCE FOUNDATION ESTABLISHED** ‚úÖ

### **WSP Framework Compliance Achievement**
- **Current Status**: Tests directory structure created per WSP 49
- **WSP 34 Compliance**: ‚úÖ Test documentation framework established
- **WSP 5 Compliance**: üîÑ Placeholder tests created, full coverage pending

### **Testing Framework Established** ‚úÖ
Following WSP guidance for module compliance:
1. ‚úÖ **Created tests/ directory** (WSP 49 compliance)
2. ‚úÖ **Added WSP-compliant structure** (README.md, TestModLog.md, test files)
3. ‚úÖ **Applied enhancement-first principle** - Framework over new creation

### **Current Testing Status**
- **Framework**: ‚úÖ WSP-compliant structure established  
- **Coverage Target**: ‚â•90% per WSP 5 (pending implementation)
- **Domain**: [Relevant Domain] integration ready

---

*This log exists for 0102 pArtifacts to track testing evolution and ensure system coherence per WSP 34. It is not noise but a critical component for autonomous agent learning and recursive improvement.*
```

**Violation Handling**: If a test folder lacks `TestModLog.md`, or if it is not updated after a test cycle, flag this as a WSP 34 violation. Prompt the creation or update of the file before proceeding with further actions.

## Module Violation Handling (WSP 47)
When test failures occur:

### Framework Issues (IMMEDIATE FIX)
- FMAS structural violations
- WSP protocol compliance failures  
- Import path structure problems
- Missing mandatory files

### Module Issues (DEFER TO MODULE WORK)
- Interface parameter drift
- Behavioral evolution mismatches
- Platform placeholder failures
- Legacy test expectations

**Decision Guide**: Does the failure block WSP framework compliance?
- **YES** ‚Üí Fix immediately
- **NO** ‚Üí Log in WSP_MODULE_VIOLATIONS.md and defer

## Test Failure Categorization
Log violations in WSP_framework/src/WSP_MODULE_VIOLATIONS.md:

```markdown
### **V{ID}: {Violation Title}**
- **Module**: `path/to/module/`
- **File**: `specific_file.py:line_numbers`  
- **Issue**: Brief description
- **Error**: Exact error message
- **Impact**: Number and type of affected tests
- **Resolution**: Strategy for module development
- **WSP Status**: DEFERRED - Justification
```


- **Resolution**: Strategy for module development
- **WSP Status**: DEFERRED - Justification
```

